name: 转换规则为Mihomo二进制格式

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  convert-rules:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出仓库
      uses: actions/checkout@v4
      
    - name: 安装Go环境
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: 安装Mihomo
      run: |
        LATEST_VERSION=$(curl -s https://api.github.com/repos/MetaCubeX/mihomo/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
        echo "最新版本号: $LATEST_VERSION"
        
        echo "尝试下载mihomo二进制文件..."
        
        if wget -O mihomo.gz "https://github.com/MetaCubeX/mihomo/releases/download/${LATEST_VERSION}/mihomo-linux-amd64-compatible-${LATEST_VERSION}.gz" 2>/dev/null; then
          echo "已下载兼容版本"
          gzip -d mihomo.gz
          chmod +x mihomo
          sudo mv mihomo /usr/local/bin/mihomo
        elif wget -O mihomo.gz "https://github.com/MetaCubeX/mihomo/releases/download/${LATEST_VERSION}/mihomo-linux-amd64-${LATEST_VERSION}.gz" 2>/dev/null; then
          echo "已下载标准版本"
          gzip -d mihomo.gz
          chmod +x mihomo
          sudo mv mihomo /usr/local/bin/mihomo
        else
          echo "直接下载失败，使用Docker提取二进制文件..."
          docker pull metacubex/mihomo:latest
          docker create --name mihomo_temp metacubex/mihomo:latest
          docker cp mihomo_temp:/mihomo ./mihomo
          docker rm mihomo_temp
          chmod +x mihomo
          sudo mv mihomo /usr/local/bin/mihomo
        fi
        
        timeout 10s mihomo -v || mihomo --version || echo "版本检查完成"
        
    - name: 下载并转换规则
      run: |
        mkdir -p rules output
        
        # 检查配置文件是否存在
        if [ ! -f "rules_config.txt" ]; then
          echo "错误: rules_config.txt 配置文件不存在，请先创建配置文件"
          echo "配置文件格式: 规则组名 规则类型 下载URL 输出文件名 (用空格分隔)"
          echo "规则类型: domain(域名规则) 或 ipcidr(IP规则)"
          exit 1
        fi
        
        # 按输出文件分组处理
        declare -A rule_groups
        declare -A rule_types
        
        # 读取配置并分组
        while read -r name rule_type url output_file; do
          # 跳过注释行和空行
          if [[ "$name" =~ ^#.* ]] || [[ -z "$name" ]]; then
            continue
          fi
          
          # 去除首尾空格
          name=$(echo "$name" | xargs)
          rule_type=$(echo "$rule_type" | xargs)
          url=$(echo "$url" | xargs)
          output_file=$(echo "$output_file" | xargs)
          
          # 验证规则类型
          if [[ "$rule_type" != "domain" && "$rule_type" != "ipcidr" ]]; then
            echo "错误: 不支持的规则类型 '$rule_type'，只支持 'domain' 或 'ipcidr'"
            exit 1
          fi
          
          # 检查同一输出文件的规则类型是否一致
          if [ -n "${rule_types[$output_file]}" ] && [ "${rule_types[$output_file]}" != "$rule_type" ]; then
            echo "错误: 输出文件 '$output_file' 包含不同类型的规则 ('${rule_types[$output_file]}' 和 '$rule_type')"
            exit 1
          fi
          
          rule_types[$output_file]="$rule_type"
          
          if [ -z "${rule_groups[$output_file]}" ]; then
            rule_groups[$output_file]="$url"
          else
            rule_groups[$output_file]="${rule_groups[$output_file]} $url"
          fi
        done < rules_config.txt
        
        # 处理每个规则组
        for output_file in "${!rule_groups[@]}"; do
          urls="${rule_groups[$output_file]}"
          rule_type="${rule_types[$output_file]}"
          
          echo "正在处理规则组: $output_file (类型: $rule_type)"
          echo "  包含的URL:"
          for url in $urls; do
            echo "    - $url"
          done
          
          # 创建临时文件用于合并
          merged_file="rules/${output_file}_merged.txt"
          > "$merged_file"
          
          # 下载并合并所有规则
          for url in $urls; do
            echo "  下载: $url"
            temp_file="rules/temp_${output_file}_$(basename "$url").txt"
            if wget -q -O "$temp_file" "$url"; then
              echo "  ✓ 下载成功"
              
              # 根据规则类型清理和验证规则
              if [ "$rule_type" = "domain" ]; then
                # 域名规则清理：移除空行、注释、无效格式
                grep -v '^#' "$temp_file" | \
                grep -v '^
          
          if [ -f "output/${output_file}" ] && [ -s "output/${output_file}" ]; then
            echo "  ✓ 文件验证通过: $(stat -c%s "output/${output_file}") 字节"
          else
            echo "  ✗ 生成的文件为空或不存在"
            exit 1
          fi
          echo ""
        done
        
        echo "已生成文件:"
        ls -la output/
        
    - name: 获取当前日期
      id: date
      run: echo "date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
        
    - name: 创建发布版本
      uses: softprops/action-gh-release@v1
      if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
      with:
        tag_name: v${{ github.run_number }}
        name: Mihomo规则集 v${{ github.run_number }}
        body: |
          自动生成的Mihomo二进制规则集
          
          **生成时间:** ${{ steps.date.outputs.date }}
          
          包含以下规则集:
          $(for file in output/*.mrs; do 
            if [ -f "$file" ]; then 
              echo "- ${file##*/}"; 
            fi 
          done)
        files: output/*.mrs
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 上传产物
      uses: actions/upload-artifact@v4
      with:
        name: mihomo-rules-binary
        path: output/
        retention-days: 30
        
    - name: 提交变更
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        
        # 更新二进制规则文件
        if ls output/*.mrs 1> /dev/null 2>&1; then
          cp output/*.mrs ./ 2>/dev/null || true
          git add *.mrs
        fi
        
        if [ -n "$(git status --porcelain)" ]; then
          git commit -m "更新Mihomo二进制规则 - $(date -u +%Y-%m-%d)"
          git push
        else
          echo "没有变更需要提交"
        fi | \
                grep -v '^[[:space:]]*
          
          if [ -f "output/${output_file}" ] && [ -s "output/${output_file}" ]; then
            echo "  ✓ 文件验证通过: $(stat -c%s "output/${output_file}") 字节"
          else
            echo "  ✗ 生成的文件为空或不存在"
            exit 1
          fi
          echo ""
        done
        
        echo "已生成文件:"
        ls -la output/
        
    - name: 创建发布版本
      uses: softprops/action-gh-release@v1
      if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
      with:
        tag_name: v${{ github.run_number }}
        name: Mihomo规则集 v${{ github.run_number }}
        body: |
          自动生成的Mihomo二进制规则集
          
          **生成时间:** ${{ steps.date.outputs.date }}
          
          包含以下规则集:
          $(for file in output/*.mrs; do 
            if [ -f "$file" ]; then 
              echo "- ${file##*/}"; 
            fi 
          done)
        files: output/*.mrs
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 获取当前日期
      id: date
      run: echo "date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
        
    - name: 上传产物
      uses: actions/upload-artifact@v4
      with:
        name: mihomo-rules-binary
        path: output/
        retention-days: 30
        
    - name: 提交变更
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        
        # 更新二进制规则文件
        if ls output/*.mrs 1> /dev/null 2>&1; then
          cp output/*.mrs ./ 2>/dev/null || true
          git add *.mrs
        fi
        
        if [ -n "$(git status --porcelain)" ]; then
          git commit -m "更新Mihomo二进制规则 - $(date -u +%Y-%m-%d)"
          git push
        else
          echo "没有变更需要提交"
        fi | \
                sed 's/^[[:space:]]*//' | \
                sed 's/[[:space:]]*$//' | \
                grep -E '^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$|^\+\.[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$|^[a-zA-Z0-9.-]+
          
          if [ -f "output/${output_file}" ] && [ -s "output/${output_file}" ]; then
            echo "  ✓ 文件验证通过: $(stat -c%s "output/${output_file}") 字节"
          else
            echo "  ✗ 生成的文件为空或不存在"
            exit 1
          fi
          echo ""
        done
        
        echo "已生成文件:"
        ls -la output/
        
    - name: 创建发布版本
      uses: softprops/action-gh-release@v1
      if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
      with:
        tag_name: v${{ github.run_number }}
        name: Mihomo规则集 v${{ github.run_number }}
        body: |
          自动生成的Mihomo二进制规则集
          
          **生成时间:** ${{ steps.date.outputs.date }}
          
          包含以下规则集:
          $(for file in output/*.mrs; do 
            if [ -f "$file" ]; then 
              echo "- ${file##*/}"; 
            fi 
          done)
        files: output/*.mrs
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 获取当前日期
      id: date
      run: echo "date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
        
    - name: 上传产物
      uses: actions/upload-artifact@v4
      with:
        name: mihomo-rules-binary
        path: output/
        retention-days: 30
        
    - name: 提交变更
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        
        # 更新二进制规则文件
        if ls output/*.mrs 1> /dev/null 2>&1; then
          cp output/*.mrs ./ 2>/dev/null || true
          git add *.mrs
        fi
        
        if [ -n "$(git status --porcelain)" ]; then
          git commit -m "更新Mihomo二进制规则 - $(date -u +%Y-%m-%d)"
          git push
        else
          echo "没有变更需要提交"
        fi | \
                sort -u >> "$merged_file"
              elif [ "$rule_type" = "ipcidr" ]; then
                # IP CIDR规则清理：移除空行、注释、验证IP格式
                grep -v '^#' "$temp_file" | \
                grep -v '^
          
          if [ -f "output/${output_file}" ] && [ -s "output/${output_file}" ]; then
            echo "  ✓ 文件验证通过: $(stat -c%s "output/${output_file}") 字节"
          else
            echo "  ✗ 生成的文件为空或不存在"
            exit 1
          fi
          echo ""
        done
        
        echo "已生成文件:"
        ls -la output/
        
    - name: 创建发布版本
      uses: softprops/action-gh-release@v1
      if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
      with:
        tag_name: v${{ github.run_number }}
        name: Mihomo规则集 v${{ github.run_number }}
        body: |
          自动生成的Mihomo二进制规则集
          
          **生成时间:** ${{ steps.date.outputs.date }}
          
          包含以下规则集:
          $(for file in output/*.mrs; do 
            if [ -f "$file" ]; then 
              echo "- ${file##*/}"; 
            fi 
          done)
        files: output/*.mrs
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 获取当前日期
      id: date
      run: echo "date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
        
    - name: 上传产物
      uses: actions/upload-artifact@v4
      with:
        name: mihomo-rules-binary
        path: output/
        retention-days: 30
        
    - name: 提交变更
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        
        # 更新二进制规则文件
        if ls output/*.mrs 1> /dev/null 2>&1; then
          cp output/*.mrs ./ 2>/dev/null || true
          git add *.mrs
        fi
        
        if [ -n "$(git status --porcelain)" ]; then
          git commit -m "更新Mihomo二进制规则 - $(date -u +%Y-%m-%d)"
          git push
        else
          echo "没有变更需要提交"
        fi | \
                grep -v '^[[:space:]]*
          
          if [ -f "output/${output_file}" ] && [ -s "output/${output_file}" ]; then
            echo "  ✓ 文件验证通过: $(stat -c%s "output/${output_file}") 字节"
          else
            echo "  ✗ 生成的文件为空或不存在"
            exit 1
          fi
          echo ""
        done
        
        echo "已生成文件:"
        ls -la output/
        
    - name: 创建发布版本
      uses: softprops/action-gh-release@v1
      if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
      with:
        tag_name: v${{ github.run_number }}
        name: Mihomo规则集 v${{ github.run_number }}
        body: |
          自动生成的Mihomo二进制规则集
          
          **生成时间:** ${{ steps.date.outputs.date }}
          
          包含以下规则集:
          $(for file in output/*.mrs; do 
            if [ -f "$file" ]; then 
              echo "- ${file##*/}"; 
            fi 
          done)
        files: output/*.mrs
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 获取当前日期
      id: date
      run: echo "date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
        
    - name: 上传产物
      uses: actions/upload-artifact@v4
      with:
        name: mihomo-rules-binary
        path: output/
        retention-days: 30
        
    - name: 提交变更
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        
        # 更新二进制规则文件
        if ls output/*.mrs 1> /dev/null 2>&1; then
          cp output/*.mrs ./ 2>/dev/null || true
          git add *.mrs
        fi
        
        if [ -n "$(git status --porcelain)" ]; then
          git commit -m "更新Mihomo二进制规则 - $(date -u +%Y-%m-%d)"
          git push
        else
          echo "没有变更需要提交"
        fi | \
                sed 's/^[[:space:]]*//' | \
                sed 's/[[:space:]]*$//' | \
                grep -E '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}(/[0-9]{1,2})?$|^([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}(/[0-9]{1,3})?
          
          if [ -f "output/${output_file}" ] && [ -s "output/${output_file}" ]; then
            echo "  ✓ 文件验证通过: $(stat -c%s "output/${output_file}") 字节"
          else
            echo "  ✗ 生成的文件为空或不存在"
            exit 1
          fi
          echo ""
        done
        
        echo "已生成文件:"
        ls -la output/
        
    - name: 创建发布版本
      uses: softprops/action-gh-release@v1
      if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
      with:
        tag_name: v${{ github.run_number }}
        name: Mihomo规则集 v${{ github.run_number }}
        body: |
          自动生成的Mihomo二进制规则集
          
          **生成时间:** ${{ steps.date.outputs.date }}
          
          包含以下规则集:
          $(for file in output/*.mrs; do 
            if [ -f "$file" ]; then 
              echo "- ${file##*/}"; 
            fi 
          done)
        files: output/*.mrs
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 获取当前日期
      id: date
      run: echo "date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
        
    - name: 上传产物
      uses: actions/upload-artifact@v4
      with:
        name: mihomo-rules-binary
        path: output/
        retention-days: 30
        
    - name: 提交变更
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        
        # 更新二进制规则文件
        if ls output/*.mrs 1> /dev/null 2>&1; then
          cp output/*.mrs ./ 2>/dev/null || true
          git add *.mrs
        fi
        
        if [ -n "$(git status --porcelain)" ]; then
          git commit -m "更新Mihomo二进制规则 - $(date -u +%Y-%m-%d)"
          git push
        else
          echo "没有变更需要提交"
        fi | \
                sort -u >> "$merged_file"
              fi
              
              rm -f "$temp_file"
            else
              echo "  ✗ 下载失败"
              exit 1
            fi
          done
          
          # 检查合并后的文件是否有有效规则
          rule_count=$(wc -l < "$merged_file" 2>/dev/null || echo "0")
          if [ "$rule_count" -eq 0 ]; then
            echo "  ✗ 错误: 没有找到有效的规则"
            echo "  调试信息: 合并文件内容 (前10行):"
            head -10 "$merged_file" 2>/dev/null || echo "文件为空"
            exit 1
          fi
          
          echo "  找到 $rule_count 条有效规则"
          echo "  规则示例 (前5条):"
          head -5 "$merged_file"
          
          echo "  开始转换合并后的规则集..."
          # 根据规则类型选择转换方式并执行
          if [ "$rule_type" = "domain" ]; then
            if timeout 120s bash -c "mihomo convert-ruleset domain text \"$merged_file\" \"output/${output_file}\""; then
              echo "  ✓ 转换成功"
            else
              echo "  ✗ 转换失败"
              echo "  调试信息: 规则文件内容 (最后10行):"
              tail -10 "$merged_file"
              exit 1
            fi
          elif [ "$rule_type" = "ipcidr" ]; then
            if timeout 120s bash -c "mihomo convert-ruleset ipcidr text \"$merged_file\" \"output/${output_file}\""; then
              echo "  ✓ 转换成功"
            else
              echo "  ✗ 转换失败"
              echo "  调试信息: 规则文件内容 (最后10行):"
              tail -10 "$merged_file"
              exit 1
            fi
          fi
          
          if [ -f "output/${output_file}" ] && [ -s "output/${output_file}" ]; then
            echo "  ✓ 文件验证通过: $(stat -c%s "output/${output_file}") 字节"
          else
            echo "  ✗ 生成的文件为空或不存在"
            exit 1
          fi
          echo ""
        done
        
        echo "已生成文件:"
        ls -la output/
        
    - name: 创建发布版本
      uses: softprops/action-gh-release@v1
      if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
      with:
        tag_name: v${{ github.run_number }}
        name: Mihomo规则集 v${{ github.run_number }}
        body: |
          自动生成的Mihomo二进制规则集
          
          **生成时间:** ${{ steps.date.outputs.date }}
          
          包含以下规则集:
          $(for file in output/*.mrs; do 
            if [ -f "$file" ]; then 
              echo "- ${file##*/}"; 
            fi 
          done)
        files: output/*.mrs
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 获取当前日期
      id: date
      run: echo "date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
        
    - name: 上传产物
      uses: actions/upload-artifact@v4
      with:
        name: mihomo-rules-binary
        path: output/
        retention-days: 30
        
    - name: 提交变更
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        
        # 更新二进制规则文件
        if ls output/*.mrs 1> /dev/null 2>&1; then
          cp output/*.mrs ./ 2>/dev/null || true
          git add *.mrs
        fi
        
        if [ -n "$(git status --porcelain)" ]; then
          git commit -m "更新Mihomo二进制规则 - $(date -u +%Y-%m-%d)"
          git push
        else
          echo "没有变更需要提交"
        fi
