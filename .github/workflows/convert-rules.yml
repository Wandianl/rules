name: 转换规则为Mihomo二进制格式

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  convert-rules:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出仓库
      uses: actions/checkout@v4
      
    - name: 安装Go环境
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: 安装Mihomo
      run: |
        LATEST_VERSION=$(curl -s https://api.github.com/repos/MetaCubeX/mihomo/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
        echo "最新版本号: $LATEST_VERSION"
        
        echo "尝试下载mihomo二进制文件..."
        
        if wget -O mihomo.gz "https://github.com/MetaCubeX/mihomo/releases/download/${LATEST_VERSION}/mihomo-linux-amd64-compatible-${LATEST_VERSION}.gz" 2>/dev/null; then
          echo "已下载兼容版本"
          gzip -d mihomo.gz
          chmod +x mihomo
          sudo mv mihomo /usr/local/bin/mihomo
        elif wget -O mihomo.gz "https://github.com/MetaCubeX/mihomo/releases/download/${LATEST_VERSION}/mihomo-linux-amd64-${LATEST_VERSION}.gz" 2>/dev/null; then
          echo "已下载标准版本"
          gzip -d mihomo.gz
          chmod +x mihomo
          sudo mv mihomo /usr/local/bin/mihomo
        else
          echo "直接下载失败，使用Docker提取二进制文件..."
          docker pull metacubex/mihomo:latest
          docker create --name mihomo_temp metacubex/mihomo:latest
          docker cp mihomo_temp:/mihomo ./mihomo
          docker rm mihomo_temp
          chmod +x mihomo
          sudo mv mihomo /usr/local/bin/mihomo
        fi
        
        timeout 10s mihomo -v || mihomo --version || echo "版本检查完成"
        
    - name: 下载并转换规则
      run: |
        mkdir -p rules output
        
        # 创建规则配置文件（如果仓库中没有）
        if [ ! -f "rules_config.txt" ]; then
          cat > rules_config.txt << 'EOF'
          # 规则集配置文件
          # 格式: 规则组名|下载URL|输出文件名
          # 相同输出文件名的规则将自动合并
          
          # 直连规则组
          direct|https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/direct.txt|direct.mrs
          direct|https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/applications.txt|direct.mrs
          
          # 代理规则组
          proxy|https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/proxy.txt|proxy.mrs
          
          # 拒绝规则组
          reject|https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/reject.txt|reject.mrs
          
          # 自定义规则组示例:
          # myrules|https://example.com/my-rules.txt|custom.mrs
          EOF
        fi
        
        # 按输出文件分组处理
        declare -A rule_groups
        
        # 读取配置并分组
        while IFS='|' read -r name url output_file; do
          # 跳过注释行和空行
          if [[ "$name" =~ ^#.* ]] || [[ -z "$name" ]]; then
            continue
          fi
          
          # 去除首尾空格
          name=$(echo "$name" | xargs)
          url=$(echo "$url" | xargs)
          output_file=$(echo "$output_file" | xargs)
          
          if [ -z "${rule_groups[$output_file]}" ]; then
            rule_groups[$output_file]="$url"
          else
            rule_groups[$output_file]="${rule_groups[$output_file]} $url"
          fi
        done < rules_config.txt
        
        # 处理每个规则组
        for output_file in "${!rule_groups[@]}"; do
          urls="${rule_groups[$output_file]}"
          
          echo "正在处理规则组: $output_file"
          echo "  包含的URL:"
          for url in $urls; do
            echo "    - $url"
          done
          
          # 创建临时文件用于合并
          merged_file="rules/${output_file}_merged.txt"
          > "$merged_file"
          
          # 下载并合并所有规则
          for url in $urls; do
            echo "  下载: $url"
            if wget -q -O - "$url" >> "$merged_file"; then
              echo "  ✓ 下载成功"
              # 确保每个规则文件后有空行
              echo "" >> "$merged_file"
            else
              echo "  ✗ 下载失败"
              exit 1
            fi
          done
          
          echo "  开始转换合并后的规则集..."
          if timeout 120s mihomo convert-ruleset domain text "$merged_file" "output/${output_file}"; then
            echo "  ✓ 转换成功"
            
            if [ -f "output/${output_file}" ] && [ -s "output/${output_file}" ]; then
              echo "  ✓ 文件验证通过: $(stat -c%s "output/${output_file}") 字节"
            else
              echo "  ✗ 生成的文件为空或不存在"
              exit 1
            fi
          else
            echo "  ✗ 转换失败"
            exit 1
          fi
          echo ""
        done
        
        echo "已生成文件:"
        ls -la output/
        
    - name: 创建发布版本
      uses: softprops/action-gh-release@v1
      if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
      with:
        tag_name: v${{ github.run_number }}
        name: Mihomo规则集 v${{ github.run_number }}
        body: |
          自动生成的Mihomo二进制规则集
          **生成时间:** $(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          包含以下规则集:
          $(for file in output/*.mrs; do echo "- ${file##*/}"; done)
        files: output/*.mrs
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 上传产物
      uses: actions/upload-artifact@v4
      with:
        name: mihomo-rules-binary
        path: output/
        retention-days: 30
        
    - name: 提交变更
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        
        # 将配置文件添加到仓库（如果不存在）
        if [ ! -f "rules_config.txt" ]; then
          git add rules_config.txt
        fi
        
        # 更新二进制规则文件
        cp output/*.mrs ./ 2>/dev/null || true
        
        if [ -n "$(git status --porcelain)" ]; then
          git add *.mrs
          git commit -m "更新Mihomo二进制规则 - $(date -u +%Y-%m-%d)"
          git push
        else
          echo "没有变更需要提交"
        fi
